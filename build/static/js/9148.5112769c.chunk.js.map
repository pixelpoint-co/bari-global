{"version":3,"file":"static/js/9148.5112769c.chunk.js","mappings":"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","sources":["components/admin/AdminDeliveryCostComponents.js","pages/admin/AdminDeliveryCost.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,    // 선형 스케일을 가져옵니다. Y축을 위한 스케일\n  PointElement,   // 차트의 포인트 (데이터 점)를 렌더링하는 요소\n  LineElement,    // 선 차트를 그리는 요소\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\n\n// 필요할 때마다 각 요소를 등록할 필요 없이, 한 번에 필요한 모든 구성 요소를 설정\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nwindow.addEventListener('resize', function () {\n  console.log(\"변경\");\n  window.location.reload();\n});\n\nconst AdminDeliveryCostComponents = () => {\n\n  // API 호출이나 기타 방법을 통해 받아온 배달 서비스의 정보를 저장\n  const [deliveryServices, setDeliveryServices] = useState([]);\n\n  // 검색어는 배달 서비스를 필터링하는 데 사용\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // 새 서비스를 추가할 때 사용자 입력에 따라 이 값을 변경\n  const [newService, setNewService] = useState({\n    provider: '',\n    cost: '',\n    duration: '',\n    description: '',\n  });\n\n  // 초기값으로 false가 설정되어 있어, 컴포넌트가 처음 렌더링될 때 모달 창이 닫혀 있는 상태\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n\n  // 초기값으로 null이 설정되어 있어, 편집할 서비스가 선택되지 않았음을 나타냄\n  const [editingService, setEditingService] = useState(null);\n\n  // 입력된 문자열에서 모든 쉼표가 제거된 새로운 문자열을 반환하는 함수\n  const removeCommas = (str) => str.replace(/,/g, '');\n\n  // 입력된 숫자에 대해 천 단위 쉼표가 추가된 새로운 문자열을 반환하는 함수\n  const addCommas = (num) => num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n  useEffect(() => {\n\n    // 두 개의 배송 서비스 정보를 포함하는 객체 배열(mockData)을 정의\n    const mockData = [\n      { id: 1, provider: 'FedEx', cost: 15000, duration: '2-3일', description: '일반 배송' },\n      { id: 2, provider: 'DHL', cost: 25000, duration: '1-2일', description: '특급 배송' },\n      { id: 3, provider: 'UPS', cost: 35000, duration: '3일', description: '당일 배송' },\n      { id: 3, provider: 'TNT Express', cost: 40000, duration: '7일', description: '특수 배송' },\n    ];\n    setDeliveryServices(mockData);\n  }, []);\n\n  // 새로운 배송 서비스를 추가하는 역할하는 함수\n  const handleAddService = (e) => {\n\n    e.preventDefault(); // 폼이 제출될 때 브라우저가 페이지를 새로고침하는 동작을 방지\n\n    // deliveryServices 배열에 있는 글자 수에 1을 더하여 새로운 서비스의 고유 ID를 생성\n    const newId = deliveryServices.length + 1;\n\n    // newService 객체의 모든 속성을 복사하여 새로운 객체 serviceToAdd를 생성, 생성된 새로운 ID(newId)를 추가\n    const serviceToAdd = { ...newService, id: newId };\n\n    setDeliveryServices([...deliveryServices, serviceToAdd]);\n\n    //  빈 문자열로 설정하여 사용자가 새로운 서비스를 추가할 때 이전 입력값이 남지 않도록함\n    setNewService({ provider: '', cost: '', duration: '', description: '' });\n  };\n\n  //  특정 배송 서비스의 정보를 수정하기 위한 함수\n  const handleEditService = (id) => {\n\n    // deliveryServices라는 배열에서 find 메소드를 사용하여 주어진 id와 일치하는 서비스 객체를 검색\n    const serviceToEdit = deliveryServices.find(service => service.id === id);\n\n    setEditingService(serviceToEdit);\n    setIsEditModalOpen(true);\n  };\n\n  // 편집된 배송 서비스의 정보를 제출하기 위해 호출되는 함수\n  const handleUpdateService = (e) => {\n\n    e.preventDefault(); //  폼이 제출될 때 발생하는 페이지 새로고침을 방지\n    const updatedServices = deliveryServices.map(service =>\n\n      // 현재 서비스의 ID가 editingService의 ID와 일치하는 경우, 해당 서비스 객체를 editingService로 교체\n      // 그렇지 않은 경우, 원래의 서비스 객체를 그대로 반환\n      service.id === editingService.id ? editingService : service\n    );\n    setDeliveryServices(updatedServices);\n    setIsEditModalOpen(false);  // 서비스를 성공적으로 업데이트한 후 편집 모달을 닫기 위한 것\n    setEditingService(null);  // 편집 중인 서비스 정보를 초기화하여, 다음 번 편집 시 이전의 편집 상태가 남지 않도록함\n  };\n\n  // 특정 배송 서비스를 삭제하는 함수\n  const handleDeleteService = (id) => {\n\n    // service 객체의 id가 삭제하려는 id와 일치하지 않는 항목만 남김\n    // 즉, 조건이 true인 항목만 포함하므로, service.id가 id와 같은 항목은 제거\n    setDeliveryServices(deliveryServices.filter(service => service.id !== id));\n  };\n\n  const handleCostChange = (e, setFunction, currentValue) => {\n\n    // 입력한 값(e.target.value)에서 쉼표를 제거하여 value 변수에 저장\n    const value = removeCommas(e.target.value);\n\n    // 조건문에서 value가 빈 문자열('')이거나 숫자만으로 구성된 경우에만 실행\n    // /^\\d*$/는 숫자로만 구성된 문자열을 의미\n    if (value === '' || /^\\d*$/.test(value)) {\n\n      // 현재 객체 속성을 모두 유지하되, cost 속성만 새 value로 덮어씀\n      // 실시간으로 반영하면서 다른 속성 값은 그대로 유지\n      setFunction({\n        ...currentValue,\n        cost: value\n      });\n    }\n  };\n\n  // deliveryServices 배열에 대해 filter 메서드를 사용하여 조건을 만족하는 항목만 걸러냄\n  const filteredServices = deliveryServices.filter(service =>\n\n    // service.provider 값을 소문자로 변환 (대소문자를 구분하지 않고 검색어와 비교하기 위해)\n    service.provider.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"p-8 bg-gray-100\">\n      <h1 className=\"text-3xl font-bold mb-8\">배송 비용 관리</h1>\n\n      <input\n        type=\"text\"\n        placeholder=\"배송 서비스 검색\"\n        className=\"p-2 border rounded mb-6 w-full\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)} // 이벤트가 발생하며 setSearchTerm 함수를 통해 searchTerm 상태를 업데이트\n      />\n\n      <form onSubmit={handleAddService} className=\"mb-8 p-4 bg-gray-50 rounded\">\n        <h2 className=\"text-xl font-semibold mb-4\">새로운 배송 서비스 추가</h2>\n\n        {/* 두 개의 열을 설정해 각 입력 필드가 한 행의 절반을 차지 */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <input\n            type=\"text\"\n            placeholder=\"서비스 제공업체\"\n            className=\"p-2 border rounded\"\n            value={newService.provider}\n            onChange={(e) => setNewService({ ...newService, provider: e.target.value })}\n            required  // 이 필드는 필수 입력 필드\n          />\n          <input\n            type=\"text\"\n            placeholder=\"배송비\"\n            className=\"p-2 border rounded\"\n\n            // newService.cost 값이 존재하면 addCommas 함수를 사용해 쉼표를 추가한 문자열을 입력\n            // 값이 없으면 빈 문자열을 ''으로 설정하여 아무 값도 표시되지 않음\n            value={newService.cost ? addCommas(newService.cost) : ''}\n\n            onChange={(e) => handleCostChange(e, setNewService, newService)}\n            required\n          />\n          <input\n            type=\"text\"\n            placeholder=\"배송 기간\"\n            className=\"p-2 border rounded\"\n            value={newService.duration}\n            onChange={(e) => setNewService({ ...newService, duration: e.target.value })}\n            required\n          />\n          <input\n            type=\"text\"\n            placeholder=\"설명\"\n            className=\"p-2 border rounded\"\n            value={newService.description}\n            onChange={(e) => setNewService({ ...newService, description: e.target.value })}\n          />\n\n        </div>\n        <button type=\"submit\" className=\"mt-4 bg-blue-500 text-white px-4 py-2 rounded\">\n          추가하기\n        </button>\n      </form>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full bg-white\">\n          <thead>\n            <tr className=\"bg-gray-100\">\n              <th className=\"px-6 py-3 text-center\">제공업체</th>\n              <th className=\"px-6 py-3 text-center\">배송비</th>\n              <th className=\"px-6 py-3 text-center\">배송 기간</th>\n              <th className=\"px-6 py-3 text-center\">설명</th>\n              <th className=\"px-6 py-3 text-center\">작업</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {/* 서비스 목록을 포함하는 배열에서 각 서비스 항목을 반복 */}\n            {filteredServices.map((service) => (\n\n              <tr key={service.id} className=\"border-b text-center\">\n                <td className=\"px-6 py-4\">{service.provider}</td>\n                <td className=\"px-6 py-4\">{addCommas(service.cost)}원</td>\n                <td className=\"px-6 py-4\">{service.duration}</td>\n                <td className=\"px-6 py-4\">{service.description}</td>\n                <td className=\"px-6 py-4\">\n\n                  <button\n                    onClick={() => handleEditService(service.id)}\n                    className=\"text-blue-500 hover:text-blue-700 mr-2\">\n                    수정\n                  </button>\n\n                  <button onClick={() => handleDeleteService(service.id)}\n                    className=\"text-red-500 hover:text-red-700\">\n                    삭제\n                  </button>\n\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"mt-8 w-full\">\n        <h2 className=\"text-xl font-semibold mb-4\">월별 평균 배송 비용 추이</h2>\n\n        {/* Grid Layout을 사용하여 두 열의 레이아웃을 만듦 */}\n        <div className='grid grid-cols-2 gap-4'>\n\n          <div className=\"bg-white p-4 rounded shadow\">\n            <Line\n              data={{\n                labels: ['1월', '2월', '3월', '4월', '5월', '6월'],\n                datasets: [{\n                  label: '평균 배송 비용',\n                  data: [15000, 16000, 15500, 16500, 17000, 18800],\n                  borderColor: 'rgb(75, 192, 192)',\n                  tension: 0,\n                  fill: false,\n                  pointBackgroundColor: 'rgb(75, 192, 192)',\n                  pointRadius: 4  // 데이터 포인트(점)의 크기\n                }]\n              }}\n              options={{\n                scales: {\n                  y: {\n                    beginAtZero: false, //  y축의 시작점을 0이 아닌 다른 값으로 설정\n                    min: 14000,\n                    max: 22000,\n                    ticks: {\n                      stepSize: 1000,   // 눈금 간격\n                      callback: function (value) {\n\n                        // toLocaleString() 메서드를 사용하여 천 단위 구분 기호를 추가\n                        return value.toLocaleString() + '원';\n                      }\n                    }\n                  }\n                },\n                maintainAspectRatio: true,  // 차트가 화면 크기에 맞게 비율을 유지\n                aspectRatio: 2,             // 차트의 가로와 세로 비율\n                plugins: {\n                  title: {\n                    display: true,\n                    text: '상반기 평균 배송비용',\n                    font: { size: 16 }\n                  }\n                }\n              }}\n            />\n          </div>\n\n          <div className='bg-white p-4 rounded shadow'>\n            <Line\n              data={{\n                labels: ['7월', '8월', '9월', '10월', '11월', '12월'],\n                datasets: [{\n                  label: '평균 배송 비용',\n                  data: [18000, 15500, 19000, 20000, 20500, 21000],\n                  borderColor: 'rgb(75, 192, 192)',\n                  tension: 0,\n                  fill: false,\n                  pointBackgroundColor: 'rgb(75, 192, 192)',\n                  pointRadius: 4\n                }]\n              }}\n              options={{\n                scales: {\n                  y: {\n                    beginAtZero: false,\n                    min: 14000,\n                    max: 22000,\n                    ticks: {\n                      stepSize: 1000,\n                      callback: function (value) {\n                        return value.toLocaleString() + '원';\n                      }\n                    }\n                  }\n                },\n                maintainAspectRatio: true,\n                aspectRatio: 2,\n                plugins: {\n                  title: {\n                    display: true,\n                    text: '하반기 평균 배송비용',\n                    font: { size: 16 }\n                  }\n                }\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* isEditModalOpen이 true일 때만 모달이 화면에 표시 */}\n      {isEditModalOpen && (\n\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n          <div className=\"bg-white p-6 rounded-lg w-96\">\n            <h2 className=\"text-xl font-semibold mb-4\">배송 서비스 수정</h2>\n            <form onSubmit={handleUpdateService}>\n              <div className=\"space-y-4\">\n                {['provider', 'cost', 'duration', 'description'].map((field) => (\n                  <div key={field}>\n\n                    <label className=\"block text-sm font-medium text-gray-700\">\n                      {field === 'provider' ? '서비스 제공업체' :\n                        field === 'cost' ? '배송비' :\n                          field === 'duration' ? '배송 기간' : '설명'}\n                    </label>\n\n                    <input\n                      type=\"text\"\n                      className=\"mt-1 block w-full rounded-md border p-2\"\n\n                      // cost 필드인 경우 addCommas 함수로 숫자에 쉼표를 추가\n                      // 그 외의 필드에서는 editingService[field] 값을 그대로 사용\n                      value={field === 'cost' ? addCommas(editingService[field]) : editingService[field]}\n\n                      onChange={(e) => field === 'cost'\n                        ? handleCostChange(e, setEditingService, editingService)\n                        : setEditingService({ ...editingService, [field]: e.target.value })\n                      }\n                      required={field !== 'description'}  // description 필드만 필수 입력이 아니고, 나머지 필드는 필수\n                    />\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 flex justify-end space-x-3\">\n                <button\n                  type=\"button\"\n                  onClick={() => setIsEditModalOpen(false)}\n                  className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-md\">\n                  취소\n                </button>\n\n                <button\n                  type=\"submit\"\n                  className=\"px-4 py-2 bg-blue-500 text-white rounded-md\">\n                  저장\n                </button>\n\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AdminDeliveryCostComponents;","import React from 'react'\nimport AdminDeliveryCost from \"../../components/admin/AdminDeliveryCostComponents\"\n\nconst AdminDeliveryCostPage = () => {\n    return (\n        <div className='w-full'><AdminDeliveryCost /></div>\n    )\n}\n\nexport default AdminDeliveryCostPage"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","window","addEventListener","console","log","location","reload","AdminDeliveryCostComponents","deliveryServices","setDeliveryServices","useState","searchTerm","setSearchTerm","newService","setNewService","provider","cost","duration","description","isEditModalOpen","setIsEditModalOpen","editingService","setEditingService","addCommas","num","toString","replace","useEffect","id","handleCostChange","e","setFunction","currentValue","value","target","test","filteredServices","filter","service","toLowerCase","includes","_jsxs","className","children","_jsx","type","placeholder","onChange","onSubmit","preventDefault","newId","length","serviceToAdd","required","map","onClick","serviceToEdit","find","handleEditService","handleDeleteService","Line","data","labels","datasets","label","borderColor","tension","fill","pointBackgroundColor","pointRadius","options","scales","y","beginAtZero","min","max","ticks","stepSize","callback","toLocaleString","maintainAspectRatio","aspectRatio","plugins","title","display","text","font","size","updatedServices","field","AdminDeliveryCostPage","AdminDeliveryCost"],"sourceRoot":""}