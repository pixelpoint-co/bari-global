{"version":3,"file":"static/js/4740.f164f488.chunk.js","mappings":"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","sources":["components/admin/AdminDeliveryComponents.js","pages/admin/AdminDelivery.js"],"sourcesContent":["import React, { useState } from 'react';\n\n// 배송 회사의 목록을 deliveryCompanies라는 배열에 정의\nconst deliveryCompanies = ['FedEx', 'DHL', 'UPS'];  \n\nconst AdminDeliveryComponents = () => {\n\n  const [orders, setOrders] = useState([  // setOrders는 orders 상태를 업데이트하기 위한 함수\n    {\n      id: 1,\n      customer: '이지은',\n      status: '배달 완료',\n      estimatedDelivery: '2024-11-05',  // 해당 주문의 예상 배송 날짜\n      company: 'FedEx',\n      trackingNumber: '123456789',      // 배송 추적을 위한 고유 번호\n    },\n    {\n      id: 2,\n      customer: '김제니',\n      status: '배송 중',\n      estimatedDelivery: '2024-11-06',\n      company: 'DHL',\n      trackingNumber: '654841655',\n    },\n    {\n      id: 3,\n      customer: '유지민',\n      status: '대기 중',\n      estimatedDelivery: '2024-11-07',\n      company: 'UPS',\n      trackingNumber: '987654321',\n    },\n    {\n      id: 4,\n      customer: '윤선호',\n      status: '반품',\n      estimatedDelivery: '2024-11-08',\n      company: 'UPS',\n      trackingNumber: '21684891',\n    },\n  ]);\n\n  // setInventory는 inventory 상태를 업데이트하기 위한 함수\n  const [inventory, setInventory] = useState([  \n    { id: 1, product: '기념품 A', stock: 20 },\n    { id: 2, product: '기념품 B', stock: 5 },\n    { id: 3, product: '기념품 C', stock: 10 }\n  ]);\n\n  // 주문 상태를 업데이트하는 함수\n  const updateOrderStatus = (id, newStatus) => {  \n\n    setOrders(prevOrders => // setOrders를 사용하여 orders 상태를 업데이트\n\n      prevOrders.map(order => // 이전 주문 배열을 순회하면서 새로운 주문 배열을 생성\n        \n        // 일치하면 기존 order 객체를 복사하고, status 속성을 newStatus로 업데이트한 새 객체를 반환\n        order.id === id ? { ...order, status: newStatus } : order\n      )\n    );\n  };\n\n  // 주문의 배송 정보(배송 회사 및 추적 번호)를 업데이트하는 함수 정의\n  const updateTrackingInfo = (id, newCompany, newTrackingNumber) => {\n\n    setOrders(prevOrders => // setOrders를 사용하여 orders 상태를 업데이트\n\n      prevOrders.map(order => // 이전 주문 배열을 순회하면서 새로운 주문 배열을 생성\n        \n        // 일치하면 기존 order 객체를 복사하고,\n        // company 속성을 newCompany로, trackingNumber 속성을 newTrackingNumber로 업데이트한 새 객체를 반환\n        // 일치하지 않는 경우 기존의 order 객체를 그대로 반환\n        order.id === id ? { ...order, company: newCompany, trackingNumber: newTrackingNumber } : order\n      )\n    );\n  };\n\n  // 주문의 상태를 수동으로 업데이트하는 함수\n  const handleManualStatusUpdate = (id, newStatus) => {\n\n    updateOrderStatus(id, newStatus); // id와 newStatus를 인자로 전달하여, 지정된 주문의 상태를 새로운 상태로 업데이트\n  };\n\n  // 재고 수량을 업데이트하는 함수\n  const handleInventoryUpdate = (id, newStock) => {\n    \n    setInventory(prevInventory =>\n\n      prevInventory.map(item => // 이전 재고 배열을 순회하면서 새로운 재고 배열을 생성\n\n        // 일치하면 item 객체를 복사하고, 재고 수량을 새로운 값으로 업데이트\n        // 일치하지 않으면 기존 아이템 객체를 그대로 반환\n        item.id === id ? { ...item, stock: newStock } : item\n      )\n    );\n  };\n\n  // 재고 경고를 계산하는 함수\n  const calculateInventoryWarnings = () => {\n    \n    // inventory 배열에서 재고 수량이 10보다 적은 item을 필터링하여 반환\n    return inventory.filter(item => item.stock < 10);\n  };\n\n  return (\n    <div className=\"p-8 bg-gray-100\">\n      <h2 className=\"text-2xl font-bold mb-4\">배송 관리</h2>\n      <table className=\"w-full border mb-8 text-center p-4 bg-white shadow-md rounded-lg\">\n        <thead>\n          <tr>\n            <th className=\"border px-4 py-2\">주문 번호</th>\n            <th className=\"border px-4 py-2\">고객명</th>\n            <th className=\"border px-4 py-2\">배송 상태</th>\n            <th className=\"border px-4 py-2\">예상 배송일</th>\n            <th className=\"border px-4 py-2\">배송업체</th>\n            <th className=\"border px-4 py-2\">추적 번호</th>\n            <th className=\"border px-4 py-2\">상태 변경</th>\n            <th className=\"border px-4 py-2\">수동 상태 업데이트</th>\n          </tr>\n        </thead>\n        <tbody>\n\n          {/* orders 배열을 순회하면서 각 주문 객체를 기반으로 새로운 JSX 요소(<tr>와 <td>)를 생성 */}\n          {orders.map(order => (\n\n            // 각 주문에 대한 테이블 행을 생성\n            <tr key={order.id}> \n              <td className=\"border px-4 py-2\">{order.id}</td>\n              <td className=\"border px-4 py-2\">{order.customer}</td>\n              <td className=\"border px-4 py-2\">{order.status}</td>\n              <td className=\"border px-4 py-2\">{order.estimatedDelivery}</td>\n              <td className=\"border px-4 py-2\">\n\n                <select\n                  value={order.company} // 현재 주문의 배송 회사 값을 설정\n\n                  // 선택이 변경될 때 updateTrackingInfo 함수를 호출\n                  onChange={(e) => updateTrackingInfo(order.id, e.target.value, order.trackingNumber)}\n                  className=\"border rounded px-2 py-1\"\n                > \n                  {/* 배송 회사 배열(deliveryCompanies)을 순회하여 각 배송 회사에 대한 <option> 요소를 생성 */}\n                  {deliveryCompanies.map(company => (\n\n                    // 각 배송 회사에 대한 옵션을 생성\n                    <option key={company} value={company}>{company}</option>\n                  ))}\n                </select>\n              </td>\n              <td className=\"border px-4 py-2\">\n                <input\n                  type=\"text\"\n                  value={order.trackingNumber}\n                  onChange={(e) => updateTrackingInfo(order.id, order.company, e.target.value)}\n                  className=\"border rounded px-2 py-1\"\n                  placeholder=\"추적 번호 입력\"\n                />\n              </td>\n              <td className=\"border px-4 py-2\">\n                <select\n                  value={order.status}\n                  onChange={(e) => updateOrderStatus(order.id, e.target.value)}\n                  className=\"border rounded px-2 py-1\"\n                >\n                  <option value=\"대기 중\">대기 중</option>\n                  <option value=\"배송 중\">배송 중</option>\n                  <option value=\"배달 완료\">배달 완료</option>\n                  <option value=\"반품\">반품</option>\n                </select>\n              </td>\n              <td className=\"border px-4 py-2\">\n                <select\n                  onChange={(e) => handleManualStatusUpdate(order.id, e.target.value)}\n                  className=\"border rounded px-2 py-1\"\n                >\n                  <option value=\"대기 중\">대기 중</option>\n                  <option value=\"배송 중\">배송 중</option>\n                  <option value=\"배달 완료\">배달 완료</option>\n                  <option value=\"반품\">반품</option>\n                </select>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <h2 className=\"text-2xl font-bold mb-4 \">재고 관리</h2>\n      <table className=\"w-full border mb-8 text-center p-4 bg-white shadow-md rounded-lg\">\n        <thead>\n          <tr>\n            <th className=\"border px-4 py-2\">상품</th>\n            <th className=\"border px-4 py-2\">재고</th>\n            <th className=\"border px-4 py-2\">재고 업데이트</th>\n          </tr>\n        </thead>\n        <tbody>\n\n          {/* inventory 배열의 각 항목에 대해 반복 */}\n          {inventory.map(item => (\n\n            <tr key={item.id}>\n              <td className=\"border px-4 py-2\">{item.product}</td>\n              <td className=\"border px-8 py-2\">{item.stock}</td>\n              <td className=\"border px-4 py-2\">\n                <input\n                  type=\"number\"\n                  value={item.stock}\n\n                  // 값이 변경될 때마다 handleInventoryUpdate 함수가 호출되어 해당 제품의 ID와 입력된 숫자를 인자로 전달\n                  // parseInt를 사용하여 문자열을 정수로 변환\n                  onChange={(e) => handleInventoryUpdate(item.id, parseInt(e.target.value))}\n\n                  className=\"border rounded px-2 py-1\"\n                />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <h2 className=\"text-2xl font-bold mb-4\">저재고 경고</h2>\n      <ul>\n        {/* 함수를 호출하여 저재고 경고를 생성하고, 각 항목에 대해 반복 */}\n        {calculateInventoryWarnings().map(item => (\n\n          // 각 리스트 아이템에 고유한 키를 부여\n          <li key={item.id} className=\"text-red-600\">{item.product}: {item.stock}개 남음</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default AdminDeliveryComponents;\n","import React from 'react'\nimport AdminDelivery from '../../components/admin/AdminDeliveryComponents'\n\nconst AdminDeliveryPage = () => {\n    return (\n        <div className='w-full'><AdminDelivery /></div>\n    )\n}\n\nexport default AdminDeliveryPage"],"names":["deliveryCompanies","AdminDeliveryComponents","orders","setOrders","useState","id","customer","status","estimatedDelivery","company","trackingNumber","inventory","setInventory","product","stock","updateOrderStatus","newStatus","prevOrders","map","order","updateTrackingInfo","newCompany","newTrackingNumber","_jsxs","className","children","_jsx","value","onChange","e","target","type","placeholder","handleManualStatusUpdate","item","handleInventoryUpdate","newStock","parseInt","prevInventory","filter","AdminDeliveryPage","AdminDelivery"],"sourceRoot":""}