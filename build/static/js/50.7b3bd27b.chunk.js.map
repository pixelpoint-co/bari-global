{"version":3,"file":"static/js/50.7b3bd27b.chunk.js","mappings":"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","sources":["components/admin/AdminCustomerContactComponents.js","pages/admin/AdminCustomerContact.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n    Paper, Typography, List, ListItem, ListItemText,\n    Container, Grid, Card, CardContent, Avatar,\n    Chip, Badge, Tooltip\n} from '@mui/material';\nimport EmailIcon from '@mui/icons-material/Email';\nimport AccessTimeIcon from '@mui/icons-material/AccessTime';\nimport PersonIcon from '@mui/icons-material/Person';\nimport { getList, updateReply, saveTempReply } from '../../api/AdminApi';\n\n// 문의 목록 스타일\nconst getListItemStyle = (isSelected) => ({\n    marginBottom: '12px',\n    borderRadius: '4px',\n    cursor: 'pointer',\n    backgroundColor: isSelected ? '#e3f2fd' : 'white',\n    border: '1px solid #e0e0e0',\n    '&:hover': {\n        bgcolor: '#f5f5f5',\n        transform: 'translateY(-2px)',\n    }\n});\n\n// StatusChip 컴포넌트 수정 (처리 상태)\nconst StatusChip = ({ status }) => {\n    const getChipColor = (status) => {\n        switch (status) {\n            case '처리완료':\n                return 'success';\n            case '처리중':\n                return 'warning';\n            case '미처리':\n                return 'error';\n            default:\n                return 'default';\n        }\n    };\n\n    return (\n        <Chip\n            label={status}\n            size=\"small\"\n            color={getChipColor(status)}\n            variant=\"outlined\"\n        />\n    );\n};\n\nconst ContactListItem = ({ contact, isSelected, onClick }) => (\n\n    // 현재 항목이 선택되었는지 여부에 따라 동적으로 스타일 적용, 사용자가 항목을 클릭하면 onClick 함수가 실행\n    <ListItem style={getListItemStyle(isSelected)} onClick={onClick}>\n        \n        <ListItemText\n            primary={\n                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>\n                    <Avatar style={{ backgroundColor: '#1976d2' }}>\n                        \n                        {/* 문의자의 이름에서 첫 글자를 표시 */}\n                        {contact.name.charAt(0)}    \n\n                    </Avatar>\n\n                    <div style={{ flex: 1 }}>\n                        <Typography style={{ fontWeight: 'bold' }}>\n                            {contact.name}\n                        </Typography>\n\n                        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                            <EmailIcon style={{ fontSize: 'small', color: 'rgba(0, 0, 0, 0.54)' }} />\n                            <Typography style={{ color: 'rgba(0, 0, 0, 0.6)' }}>\n                                {contact.email}\n                            </Typography>\n                        </div>\n\n                    </div>\n\n                    {/* <Tooltip> 컴포넌트: 마우스를 올리면 툴팁(설명 박스) */}\n                    <Tooltip title=\"문의 날짜\">\n                        <Typography style={{ color: 'rgba(0, 0, 0, 0.6)', fontSize: '12px' }}>\n                            {new Date(contact.createdAt).toLocaleDateString()}\n                        </Typography>\n                    </Tooltip>\n                </div>\n            }\n            secondary={\n                <div style={{ marginTop: '8px' }}>\n\n                    <Typography style={{\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',   // 텍스트가 숨겨질 경우, 말 줄임표(...)로 표시\n                        whiteSpace: 'nowrap',\n                        fontSize: '14px'\n                    }}>\n                        {contact.inquiry}\n                    </Typography>\n\n                    <div style={{ marginTop: '10px' }}>\n                        <StatusChip status={contact.status} />\n                    </div>\n\n                </div>\n            }\n        />\n    </ListItem>\n);\n\n// 문의 상세 정보 섹션\nconst ContactDetail = ({ contact, replyText, setReplyText, onSaveTemp, onComplete }) => (\n    <Card>\n        <CardContent>\n            <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',    // 좌우 공간을 최대한 활용하여 배치\n                marginBottom: '24px',\n                paddingBottom: '16px',\n                borderBottom: '1px solid #e0e0e0'\n            }}>\n                \n                {/* 문의 상세 내용 첫 번째 섹션 */}\n                <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>\n                    <Avatar style={{ backgroundColor: '#1976d2' }}>{contact.name.charAt(0)}</Avatar>\n                    <div>\n                        <Typography variant=\"h6\">{contact.name}</Typography>\n                        <Typography style={{ color: 'rgba(0, 0, 0, 0.6)' }}>{contact.email}</Typography>\n                    </div>\n                </div>\n\n                <Chip\n                    icon={<AccessTimeIcon />}\n                    label={new Date(contact.createdAt).toLocaleString()}\n                    variant=\"outlined\"  // 테두리 있는 스타일\n                    size=\"small\"\n                />\n            </div>\n\n            {/* 문의 내용 표시 영역 */}\n            <div style={{ marginBottom: '32px' }}>\n                <Typography style={{ marginBottom: '8px', fontWeight: 'bold' }}>문의 내용</Typography>\n                <Paper style={{ padding: '16px', backgroundColor: '#f5f5f5' }} variant=\"outlined\">\n                    <Typography>{contact.inquiry}</Typography>\n                </Paper>\n            </div>\n\n            {/* 처리 상태 표시 영역 */}\n            <div style={{ marginBottom: '24px' }}>\n                <Typography style={{ marginBottom: '8px', fontWeight: 'bold' }}>처리 상태</Typography>\n                <div style={{ display: 'flex', gap: '16px', marginBottom: '16px' }}>\n                    <StatusChip status={contact.status} />\n                    <Typography style={{ color: 'rgba(0, 0, 0, 0.6)' }}>\n\n                        {/* 문의 접수일시 표시 */}\n                        접수일시: {new Date(contact.createdAt).toLocaleString()}\n                    </Typography>\n                </div>\n            </div>\n\n            <div>\n                <Typography style={{ marginBottom: '16px', fontWeight: 'bold' }}>답변 내용</Typography>\n                <Paper style={{ padding: '16px' }} variant=\"outlined\">\n                    <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>\n                        <textarea\n                            value={replyText}\n                            onChange={(e) => setReplyText(e.target.value)}\n                            placeholder=\"답변을 입력해주세요.\"\n                            style={{\n                                width: '100%',\n                                minHeight: '130px',\n                                padding: '8px',\n                                border: '1px solid #e0e0e0',\n                                borderRadius: '4px',\n                                resize: 'vertical'\n                            }}\n                        />\n                        <div style={{ display: 'flex', justifyContent: 'flex-end', gap: '8px' }}>\n                            <Chip\n                                label=\"임시저장\"\n                                variant=\"outlined\"\n                                style={{ cursor: 'pointer' }}\n                                onClick={onSaveTemp}\n                            />\n                            <Chip\n                                label=\"답변완료\"\n                                color=\"primary\"\n                                style={{ cursor: 'pointer' }}\n                                onClick={onComplete}\n                            />\n                        </div>\n                    </div>\n                </Paper>\n            </div>\n        </CardContent>\n    </Card>\n);\n\nconst AdminCustomerContactComponent = () => {\n    const [selectedContact, setSelectedContact] = useState(null);\n    const [replyText, setReplyText] = useState('');\n    const [contacts, setContacts] = useState([]);\n\n    useEffect(() => {\n        loadContacts();\n    }, []);\n\n    const loadContacts = async () => {\n        try {\n            const data = await getList();\n            setContacts(data);\n        } catch (error) {\n            console.error(\"문의 목록 로딩 실패:\", error);\n            alert(\"문의 목록을 불러오는데 실패했습니다.\");\n        }\n    };\n\n    const handleSaveTemp = async () => {\n        if (!selectedContact || !replyText.trim()) {\n            alert('답변 내용을 입력해주세요.');\n            return;\n        }\n\n        try {\n            console.log('Saving temp reply:', replyText); // 디버깅\n            const response = await saveTempReply(selectedContact.id, replyText.trim());\n            console.log('Save temp response:', response); // 디버깅\n\n            if (response) {\n                // 상태를 '처리중'으로 업데이트\n                const updatedContact = {\n                    ...response,\n                    status: '처리중'\n                };\n\n                setSelectedContact(updatedContact);\n                setContacts(prevContacts => prevContacts.map(contact =>\n                    contact.id === selectedContact.id ? updatedContact : contact\n                ));\n                alert('임시저장되었습니다.');\n            }\n        } catch (error) {\n            console.error(\"임시저장 실패:\", error);\n            alert(\"임시저장에 실패했습니다.\");\n        }\n    };\n\n    const handleComplete = async () => {\n        if (!selectedContact || !replyText.trim()) {\n            alert('답변 내용을 입력해주세요.');\n            return;\n        }\n\n        try {\n            const response = await updateReply(selectedContact.id, replyText.trim());\n            console.log('Update reply response:', response); // 디버깅\n\n            if (response) {\n                const updatedContact = {\n                    ...response,\n                    reply: replyText,\n                    status: '처리완료',\n                    tempReply: ''\n                };\n\n                setSelectedContact(updatedContact);\n                setContacts(prevContacts => prevContacts.map(contact =>\n                    contact.id === selectedContact.id ? updatedContact : contact\n                ));\n                alert('답변이 등록되었습니다.');\n            }\n        } catch (error) {\n            console.error(\"답변 등록 실패:\", error);\n            alert(\"답변 등록에 실패했습니다.\");\n        }\n    };\n\n    const handleContactSelect = (contact) => {\n        setSelectedContact(contact);\n        setReplyText(contact.tempReply || contact.reply || '');\n    };\n\n    return (\n        <Container maxWidth=\"xl\" style={{ paddingTop: '32px', paddingBottom: '32px' }}>\n            <div style={{\n                marginBottom: '32px',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between'\n            }}>\n                <Typography variant=\"h4\" style={{ fontWeight: 'bold' }}>고객 문의 관리</Typography>\n                <Badge badgeContent={contacts.filter(c => c.status === '미처리').length} color=\"primary\">\n                    <Chip label=\"전체 문의\" color=\"primary\" variant=\"outlined\" />\n                </Badge>\n            </div>\n\n            <Grid container spacing={3}>\n                <Grid item xs={12} md={5}>\n                    <Paper style={{ padding: '16px', height: '80vh', overflow: 'auto' }}>\n                        <Typography variant=\"h6\" style={{ marginBottom: '16px', fontWeight: 'bold' }}>\n                            문의 목록\n                        </Typography>\n                        <List>\n                            {contacts.map((contact) => (\n                                <ContactListItem\n                                    key={contact.id}\n                                    contact={contact}\n                                    isSelected={selectedContact?.id === contact.id}\n                                    onClick={() => handleContactSelect(contact)}\n                                />\n                            ))}\n                        </List>\n                    </Paper>\n                </Grid>\n\n                <Grid item xs={12} md={7}>\n                    <Paper style={{ padding: '24px', height: '80vh', overflow: 'auto' }}>\n                        <Typography variant=\"h6\" style={{ marginBottom: '16px', fontWeight: 'bold' }}>\n                            문의 상세 내용\n                        </Typography>\n                        {selectedContact ? (\n                            <ContactDetail\n                                contact={selectedContact}\n                                replyText={replyText}\n                                setReplyText={setReplyText}\n                                onSaveTemp={handleSaveTemp}\n                                onComplete={handleComplete}\n                            />\n                        ) : (\n                            <div style={{\n                                display: 'flex',\n                                flexDirection: 'column',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                height: 'calc(100% - 60px)',\n                                backgroundColor: '#f5f5f5',\n                                borderRadius: '4px'\n                            }}>\n                                <PersonIcon style={{ fontSize: '40px', color: 'rgba(0, 0, 0, 0.54)', marginBottom: '8px' }} />\n                                <Typography style={{ color: 'rgba(0, 0, 0, 0.54)' }}>문의를 선택해주세요</Typography>\n                            </div>\n                        )}\n                    </Paper>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n};\n\nexport default AdminCustomerContactComponent;","import React from 'react'\nimport AdminCustomerContact from '../../components/admin/AdminCustomerContactComponents'\n\nconst AdminCustomerContactPage = () => {\n    return (\n        <div className='w-full'><AdminCustomerContact /></div>\n    )\n}\n\nexport default AdminCustomerContactPage"],"names":["getListItemStyle","isSelected","marginBottom","borderRadius","cursor","backgroundColor","border","bgcolor","transform","StatusChip","_ref","status","_jsx","Chip","label","size","color","getChipColor","variant","ContactListItem","_ref2","contact","onClick","ListItem","style","children","ListItemText","primary","_jsxs","display","alignItems","gap","Avatar","name","charAt","flex","Typography","fontWeight","EmailIcon","fontSize","email","Tooltip","title","Date","createdAt","toLocaleDateString","secondary","marginTop","overflow","textOverflow","whiteSpace","inquiry","ContactDetail","_ref3","replyText","setReplyText","onSaveTemp","onComplete","Card","CardContent","justifyContent","paddingBottom","borderBottom","icon","AccessTimeIcon","toLocaleString","Paper","padding","flexDirection","value","onChange","e","target","placeholder","width","minHeight","resize","AdminCustomerContactComponent","selectedContact","setSelectedContact","useState","contacts","setContacts","useEffect","loadContacts","async","data","getList","error","console","alert","Container","maxWidth","paddingTop","Badge","badgeContent","filter","c","length","Grid","container","spacing","item","xs","md","height","List","map","id","tempReply","reply","handleContactSelect","trim","log","response","saveTempReply","updatedContact","prevContacts","updateReply","PersonIcon","AdminCustomerContactPage","className","AdminCustomerContact"],"sourceRoot":""}